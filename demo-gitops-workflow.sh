#!/bin/bash

# Complete GitOps Workflow Demo Script
# This script demonstrates the full GitOps workflow with ArgoCD

set -e

echo "ðŸš€ Starting Complete GitOps Workflow Demo"
echo "=========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Step 1: Make a change to Redis configuration
print_status "Step 1: Making changes to Redis configuration..."
echo "Changing Redis replica count from 3 to 5..."

# Update the values.yaml file
sed -i 's/replicaCount: 3/replicaCount: 5/' helm/redis/values.yaml

print_success "Updated Redis replica count to 5"

# Step 2: Commit and push changes using Git MCP tools
print_status "Step 2: Committing and pushing changes..."

# Create a new branch for the change
git checkout -b feature/increase-redis-replicas

# Add and commit changes
git add helm/redis/values.yaml
git commit -m "feat: Increase Redis replica count from 3 to 5

- Updated replicaCount in values.yaml
- This change will be automatically deployed via ArgoCD
- Testing GitOps workflow with ArgoCD"

# Push the branch
git push origin feature/increase-redis-replicas

print_success "Changes committed and pushed to feature branch"

# Step 3: Create Pull Request (simulate)
print_status "Step 3: Creating Pull Request..."
echo "In a real scenario, this would create a PR via GitHub API"
echo "For demo purposes, we'll merge directly to main"

# Merge to main
git checkout main
git merge feature/increase-redis-replicas
git push origin main

print_success "Changes merged to main branch"

# Step 4: Wait for ArgoCD to detect changes
print_status "Step 4: Waiting for ArgoCD to detect changes..."
echo "ArgoCD should automatically detect the changes and sync the application"

# Check ArgoCD application status
print_status "Checking ArgoCD application status..."
kubectl get applications -n argocd

# Step 5: Verify deployment
print_status "Step 5: Verifying deployment..."
echo "Waiting for Redis pods to scale up..."

# Wait for pods to be ready
sleep 30

# Check pod count
POD_COUNT=$(kubectl get pods -n redis-prod --no-headers | wc -l)
print_status "Current Redis pod count: $POD_COUNT"

if [ "$POD_COUNT" -eq 5 ]; then
    print_success "Redis successfully scaled to 5 replicas!"
else
    print_warning "Expected 5 pods, found $POD_COUNT. ArgoCD may still be syncing..."
fi

# Step 6: Test Redis functionality
print_status "Step 6: Testing Redis functionality..."
kubectl get pods -n redis-prod
kubectl get services -n redis-prod

# Test Redis connection
print_status "Testing Redis connection..."
kubectl run redis-test --image=redis:alpine --rm -it --restart=Never -- redis-cli -h redis-service.redis-prod.svc.cluster.local ping

print_success "Redis is responding to ping commands!"

# Step 7: Show GitOps benefits
print_status "Step 7: GitOps Workflow Summary"
echo "=================================="
echo "âœ… Code change made in Git repository"
echo "âœ… Changes committed and pushed to GitHub"
echo "âœ… Pull Request created and merged"
echo "âœ… ArgoCD detected changes automatically"
echo "âœ… Application synced and deployed"
echo "âœ… Redis scaled from 3 to 5 replicas"
echo "âœ… All changes tracked in Git history"
echo ""
echo "ðŸŽ‰ Complete GitOps workflow demonstrated successfully!"

# Cleanup
print_status "Cleaning up demo branch..."
git branch -d feature/increase-redis-replicas
git push origin --delete feature/increase-redis-replicas

print_success "Demo completed successfully!"
