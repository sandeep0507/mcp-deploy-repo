name: ArgoCD Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'helm/**'
      - 'k8s/**'
      - '.github/workflows/argocd-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'helm/**'
      - 'k8s/**'
      - '.github/workflows/argocd-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'minikube'
        type: choice
        options:
          - minikube
          - staging
          - production

env:
  ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
  ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
  KUBECONFIG: ${{ secrets.KUBECONFIG }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      redis-changed: ${{ steps.changes.outputs.redis }}
      mcp-server-changed: ${{ steps.changes.outputs.mcp-server }}
      gitops-monitor-changed: ${{ steps.changes.outputs.gitops-monitor }}
      any-changed: ${{ steps.changes.outputs.any }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            redis:
              - 'helm/redis/**'
            mcp-server:
              - 'helm/mcp-server/**'
            gitops-monitor:
              - 'helm/gitops-monitor/**'
            any:
              - 'helm/**'
              - 'k8s/**'

  deploy-redis:
    needs: detect-changes
    if: needs.detect-changes.outputs.redis-changed == 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'minikube' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.19.0'

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config use-context minikube

      - name: Deploy Redis with Helm
        run: |
          export KUBECONFIG=kubeconfig
          helm upgrade --install redis ./helm/redis \
            --namespace redis-prod \
            --create-namespace \
            --set namespace=redis-prod \
            --wait \
            --timeout=5m

      - name: Verify Redis deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl get pods -n redis-prod -l app.kubernetes.io/name=redis
          kubectl get deployment redis -n redis-prod

      - name: Notify ArgoCD (if configured)
        if: env.ARGOCD_SERVER != ''
        run: |
          curl -X POST "${{ env.ARGOCD_SERVER }}/api/v1/applications/redis-gitops-app/sync" \
            -H "Authorization: Bearer ${{ env.ARGOCD_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"prune": true, "dryRun": false}'

  deploy-mcp-server:
    needs: detect-changes
    if: needs.detect-changes.outputs.mcp-server-changed == 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'minikube' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.19.0'

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config use-context minikube

      - name: Deploy MCP Server with Helm
        run: |
          export KUBECONFIG=kubeconfig
          helm upgrade --install mcp-server ./helm/mcp-server \
            --namespace mcp-server \
            --create-namespace \
            --set namespace=mcp-server \
            --wait \
            --timeout=5m

      - name: Verify MCP Server deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl get pods -n mcp-server -l app.kubernetes.io/name=mcp-server
          kubectl get deployment mcp-server -n mcp-server

  deploy-gitops-monitor:
    needs: detect-changes
    if: needs.detect-changes.outputs.gitops-monitor-changed == 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'minikube' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.19.0'

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config use-context minikube

      - name: Deploy GitOps Monitor with Helm
        run: |
          export KUBECONFIG=kubeconfig
          helm upgrade --install gitops-monitor ./helm/gitops-monitor \
            --namespace gitops-monitor \
            --create-namespace \
            --wait \
            --timeout=5m

      - name: Verify GitOps Monitor deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl get pods -n gitops-monitor -l app.kubernetes.io/name=gitops-monitor
          kubectl get deployment gitops-monitor -n gitops-monitor

  argocd-sync:
    needs: [detect-changes, deploy-redis, deploy-mcp-server, deploy-gitops-monitor]
    if: always() && (needs.detect-changes.outputs.any-changed == 'true')
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'minikube' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config use-context minikube

      - name: Check ArgoCD status
        run: |
          export KUBECONFIG=kubeconfig
          kubectl get pods -n argocd
          kubectl get applications -n argocd

      - name: Sync ArgoCD applications
        if: env.ARGOCD_SERVER != ''
        run: |
          # Sync Redis application
          curl -X POST "${{ env.ARGOCD_SERVER }}/api/v1/applications/redis-gitops-app/sync" \
            -H "Authorization: Bearer ${{ env.ARGOCD_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"prune": true, "dryRun": false}' || echo "Redis sync failed or not configured"
          
          # Sync MCP Server application
          curl -X POST "${{ env.ARGOCD_SERVER }}/api/v1/applications/mcp-server-gitops-app/sync" \
            -H "Authorization: Bearer ${{ env.ARGOCD_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"prune": true, "dryRun": false}' || echo "MCP Server sync failed or not configured"

      - name: Verify deployments
        run: |
          export KUBECONFIG=kubeconfig
          echo "=== Redis Pods ==="
          kubectl get pods -n redis-prod -l app.kubernetes.io/name=redis || echo "No Redis pods found"
          
          echo "=== MCP Server Pods ==="
          kubectl get pods -n mcp-server -l app.kubernetes.io/name=mcp-server || echo "No MCP Server pods found"
          
          echo "=== GitOps Monitor Pods ==="
          kubectl get pods -n gitops-monitor -l app.kubernetes.io/name=gitops-monitor || echo "No GitOps Monitor pods found"

  notify:
    needs: [detect-changes, deploy-redis, deploy-mcp-server, deploy-gitops-monitor, argocd-sync]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "## ðŸš€ GitOps Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changes Detected:" >> $GITHUB_STEP_SUMMARY
          echo "- Redis: ${{ needs.detect-changes.outputs.redis-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- MCP Server: ${{ needs.detect-changes.outputs.mcp-server-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- GitOps Monitor: ${{ needs.detect-changes.outputs.gitops-monitor-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status:" >> $GITHUB_STEP_SUMMARY
          echo "- Redis: ${{ needs.deploy-redis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- MCP Server: ${{ needs.deploy-mcp-server.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- GitOps Monitor: ${{ needs.deploy-gitops-monitor.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ArgoCD Sync: ${{ needs.argocd-sync.result }}" >> $GITHUB_STEP_SUMMARY
