name: GitOps Deployment Workflow

on:
  push:
    branches: [ main ]
    paths: [ 'helm/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'helm/**' ]

jobs:
  gitops-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Install Minikube
      uses: medyagh/gimme-action@v1
      with:
        version: 1.21.0
        
    - name: Start Minikube
      run: |
        minikube start --driver=docker
        minikube status
        
    - name: Install ArgoCD CLI
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64
        
    - name: Deploy ArgoCD
      run: |
        kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
        # Deploy ArgoCD components
        kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        
    - name: Wait for ArgoCD to be ready
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
        kubectl wait --for=condition=available --timeout=300s deployment/argocd-application-controller -n argocd
        
    - name: Port forward ArgoCD
      run: |
        kubectl port-forward svc/argocd-server -n argocd 8080:443 &
        sleep 10
        
    - name: Get ArgoCD admin password
      run: |
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d > argocd-password.txt
        echo "ArgoCD admin password saved to argocd-password.txt"
        
    - name: Login to ArgoCD
      run: |
        argocd login localhost:8080 --username admin --password $(cat argocd-password.txt) --insecure
        
    - name: Create ArgoCD Application
      run: |
        argocd app create redis-gitops \
          --repo https://github.com/sbd665/mcp-deploy-repo \
          --path helm/redis \
          --dest-server https://kubernetes.default.svc \
          --dest-namespace redis-prod \
          --sync-policy automated \
          --auto-prune \
          --self-heal
        
    - name: Sync Application
      run: |
        argocd app sync redis-gitops
        
    - name: Verify Deployment
      run: |
        kubectl get pods -n redis-prod
        kubectl get services -n redis-prod
        
    - name: Test Redis Connection
      run: |
        kubectl run redis-test --image=redis:alpine --rm -it --restart=Never -- redis-cli -h redis-service.redis-prod.svc.cluster.local ping
